name: "Turing"
scopeName: "source.turing"
fileTypes: [".t", ".tu"]
patterns: [include: "#main"]

repository:
	
	# Common patterns
	main:
		patterns: [
			{ include: "#comments"      }
			{ include: "#boolean"       }
			{ include: "#string"        }
			{ include: "#numbers"       }
			{ include: "#for"           }
			{ include: "#cc"            }
			{ include: "#case"          }
			{ include: "#function"      }
			{ include: "#keywords"      }
			{ include: "#variables"     }
			{ include: "#operators"     }
			{ include: "#forward"       }
			{ include: "#procedure"     }
			{ include: "#process"       }
			{ include: "#handler"       }
			{ include: "#class"         }
			{ include: "#function-call" }
			{ include: "#stdlib"        }
		]


	# Comments
	comments:
		patterns: [{
			
			# End-of-line comment
			name: "comment.line.percentage.turing"
			begin: "%"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.turing"
		},{
			
			# Bracketed
			name: "comment.block.bracketed.turing"
			begin: "/\\*"
			end: "\\*/"
			beginCaptures: 0: name: "punctuation.definition.comment.turing"
			endCaptures:   0: name: "punctuation.definition.comment.turing"
		}]

	
	
	# String literals
	string:
		name: "string.quoted.double.turing"
		begin: '"'
		end:   '"'
	
	
	# Numbers
	numbers:
		patterns: [
			{name: "constant.numeric.float.turing", match: "\\b\\d+\\.\\d+\\b"}
			{name: "constant.numeric.int.turing",   match: "\\b\\d+\\b"}
		]
	
	
	# List of named values
	list:
		patterns: [
			{match: "\\w+", name: "variable.name.turing"}
			{match: ",",    name: "meta.delimiter.object.comma.turing"}
		]
	
	
	# Function declaration
	function:
		name: "meta.function.turing"
		begin: """(?x)
			\\b
			(?:
				(body)          # 1: storage.modifier.body.turing
				\\s+
			)?
			(function|fcn)      # 2: storage.type.turing
			(?:
				\\s+
				(pervasive|\\*) # 3: storage.modifier.pervasive.turing
			)?
			\\s+
			(\\w+)              # 4: entity.name.function.turing
			\\s*
			(                   # 5: meta.function.parameters.turing
				(\\()           # 6: punctuation.definition.parameters.begin.turing
				(.*)            # 7: include: “#param-declarations”
				(\\))           # 8: punctuation.definition.parameters.end.turing
			)
			\\s*
			(:)                 # 9: punctuation.separator.key-value.turing
			\\s*
			(\\w+)              # 10: storage.type.type-spec.turing
		"""
		end: "\\b(end)\\s+(\\4)"
		patterns: [{
			
			# pre|init|post clause
			name: "meta.$1-function.turing"
			begin: "^\\s*(pre|init|post)(?=\\s|$)"
			end: "$"
			patterns: [include: "$self"]
			beginCaptures:
				1: name: "keyword.function.$1.turing"
		
			},{ include: "$self" }
		]
		beginCaptures:
			1: name: "storage.modifier.body.turing"
			2: name: "storage.type.turing"
			3: name: "storage.modifier.pervasive.turing"
			4: name: "entity.name.function.turing"
			5: name: "meta.function.parameters.turing"
			6: name: "punctuation.definition.parameters.begin.turing"
			7: patterns: [include: "#param-declarations"]
			8: name: "punctuation.definition.parameters.end.turing"
			9: name: "punctuation.separator.key-value.turing"
			10: name: "storage.type.type-spec.turing"
		endCaptures:
			1: name: "keyword.control.end.turing"
			2: name: "entity.name.function.turing"


	# Function parameters
	"param-declarations":
		match: "\\b(\\w+)\\s+(:)\\s+((\\w+))"
		captures:
			1: name: "variable.parameter.function.turing"
			2: name: "storage.type.turing"
			3: patterns: [include: "#types"]


	# Function call
	"function-call":
		name: "meta.function-call.turing"
		begin: "(([\\w.]+))\\s*(\\()"
		end:   "\\)"
		contentName: "meta.function-call.arguments.turing"
		beginCaptures:
			1: name: "entity.function.name.turing"
			2: patterns: [include: "#function-name"]
			3: name: "punctuation.definition.arguments.begin.turing"
		endCaptures:
			0: name: "punctuation.definition.arguments.end.turing"
		patterns: [include: "$self"]
	
	
	# Function name: Wrapper for bundled inclusions
	"function-name":
		patterns: [
			{include: "#stdlib"}
			{match: "\\.", name: "punctuation.separator.method.turing"}
		]
		
	
	# Keywords
	keywords:
		patterns: [{
			
			# Control flow
			match: "\\b((?:end\\s+)?if|then|elsif|else|(?:end\\s+)?loop|exit|when)\\b"
			name: "keyword.control.$1.turing"
		},{
			
			# Logical operators
			match: "\\b(and|not|x?or)\\b"
			name: "keyword.operator.$1.turing"
		},{
			
			# Statements
			match: "\\b(assert|begin|break|close|exit|fork|free|get|new|open|pause|put|quit|read|result|return|seek|signal|tag|tell|wait|write)\\b"
			name: "keyword.other.statement.$1.turing"
		},{
			
			# Modifiers
			match: "\\b(monitor)\\b"
			name: "storage.modifier.$1.turing"
		},{
		
			# Skip (used in get/put statements)
			match: "\\b(skip)\\b"
			name: "constant.language.skip.turing"
		}]


	# Conditional compilation
	cc:
		name: "meta.preprocessor.$3.turing"
		match: "^\\s*((#)((?:end\\s+)?if|elsif|else))"
		captures:
			1: name: "keyword.control.directive.conditional.turing"		
			2: name: "punctuation.definition.directive.turing"


	# For loops
	for:
		name: "meta.for-loop.turing"
		begin: "\\b(for)\\b(?:\\s+(decreasing)\\b)?"
		end:   "\\b(end)\\s+(for)"
		patterns: [
			{
				match: "\\G(.*?)\\b(by)\\b"
				captures:
					1: patterns: [include: "$self"]
					2: name: "keyword.control.by.turing"
			
			},{include: "$self"}
		]
		beginCaptures:
			1: name: "keyword.control.for.turing"
			2: name: "keyword.operator.decreasing.turing"
		endCaptures:
			1: name: "keyword.control.end.turing"
			2: name: "keyword.control.for.turing"

	
	# Case blocks
	case:
		name: "meta.scope.case-block.turing"
		begin: "\\b(case)\\s+(\\w+)\\s+(of)\\b"
		end:   "\\b(end\\s+case)\\b"
		patterns: [
			{match: "\\b(label)\\b", name: "keyword.other.statement.label"}
			{include: "$self"}
		]
		beginCaptures:
			1: name: "keyword.control.case.turing"
			2: name: "variable.parameter.turing"
			3: name: "keyword.operator.of.turing"
		endCaptures:
			1: name: "keyword.control.end.case.turing"


	# Forward procedure
	forward:
		name: "meta.forward.procedure.turing"
		begin: "\\b(forward)\\s+(procedure|proc)\\s+(\\w+)"
		end:   "(?=$|%|/\\*)"
		beginCaptures:
			1: name: "storage.modifier.$1.turing"
			2: name: "storage.type.function.turing"
			3: name: "entity.name.function.turing"
		patterns: [
			{include: "#parameters"}
			{include: "$self"}
		]


	# Procedure declaration
	procedure:
		name: "meta.scope.$1.procedure.turing"
		begin: "\\b(?:(deferred|body)\\s+)?(procedure|proc)\\s+(\\w+)"
		end:   "\\b(end)\\s+(\\3)"
		patterns: [
			{include: "#parameters"}
			{include: "$self"}
		]
		beginCaptures:
			1: name: "storage.modifier.$1.turing"
			2: name: "storage.type.function.turing"
			3: name: "entity.name.function.turing"
		endCaptures:
			1: name: "keyword.control.end.turing"
			2: name: "entity.name.function.turing"
	
	
	# Process statement
	process:
		name: "meta.scope.process.turing"
		begin: "\\b(process)(?:\\s+(pervasive|\\*)(?=\\s))?\\s+(\\w+)"
		end:   "\\b(end)\\s+(\\3)"
		patterns: [
			{include: "#parameters"}
			{include: "$self"}
		]
		beginCaptures:
			1: name: "storage.type.function.turing"
			2: name: "storage.modifier.pervasive.turing"
			3: name: "entity.name.function.turing"
		endCaptures:
			1: name: "keyword.control.end.turing"
			2: name: "entity.name.function.turing"
	
	
	# Bracketed parameter declarations used in procedure/process headers
	parameters:
		name: "meta.function.parameters.turing"
		begin: "\\G\\s*(\\()"
		end: "\\)"
		beginCaptures: 1: name: "punctuation.definition.arguments.begin.turing"
		endCaptures:   0: name: "punctuation.definition.arguments.end.turing"
		patterns: [
			{include: "$self"}
			{match: "\\w+", name: "variable.parameter.function.turing"}
		]
	
	
	# Exception handler
	handler:
		name: "meta.scope.handler.turing"
		begin: "\\b(handler)\\s*(\\()\\s*(\\w+)\\s*(\\))"
		end:   "\\b(end\\s+handler)\\b"
		patterns: [include: "$self"]
		beginCaptures:
			1: name: "storage.type.handler.turing"
			2: name: "punctuation.definition.arguments.begin.turing"
			3: name: "variable.parameter.handler.turing"
			4: name: "punctuation.definition.arguments.end.turing"
		endCaptures:
			0: name: "keyword.control.end.turing"
	
	
	# Class declarations
	class:
		name: "meta.scope.class-block.turing"
		begin: "^\\s*(class)\\s+(\\w+)"
		end:   "\\b(end)\\s+(\\2)"
		patterns: [
			{include: "#class-innards"}
			{include: "$self"}
		]
		beginCaptures:
			1: name: "storage.type.class.turing"
			2: name: "entity.name.type.class.turing"
		endCaptures:
			1: name: "keyword.control.end.turing"
			2: name: "entity.name.type.class.turing"
	
	
	# Various clauses for inheritance, importing/exporting, etc
	"class-innards":
		patterns: [{
			
			# Import/export
			begin: "\\b(import|export)\\b"
			end:   "(?=$|%|/\\*)"
			beginCaptures:
				1: name: "keyword.control.$1.turing"
			patterns: [
				{include: "#list"}
				{include: "$self"}
			]
		},{
			
			# Inherited class
			name: "meta.other.inherited-class.turing"
			begin: "\\b(inherit)\\b"
			end:   "\\w+"
			beginCaptures: 1: name: "storage.modifier.inherit.turing"
			endCaptures:   0: name: "entity.other.inherited-class.turing"
			patterns: [include: "$self"]
		},{
			
			# Implement/Implement by
			name: "meta.other.$1.turing"
			begin: "\\b(implement(?:\\s+by)?)\\b"
			end:   "\\w+"
			beginCaptures: 1: name: "storage.modifier.implements.turing"
			endCaptures:   0: name: "entity.other.inherited-class.turing"
			patterns: [include: "$self"]
		}]
	

	# Variables and constants
	variables:
		patterns: [{
			
			# Declaration
			name: "meta.variable-declaration.turing"
			begin: "\\b(var|const)\\s+"
			end:   "(:)\\s*(\\w*)\\s*(:=)?"
			beginCaptures:
				1: name: "storage.type.$1.turing"
			endCaptures:
				1: name: "punctuation.separator.key-value.turing"
				2: name: "storage.type.type-spec.turing"
				3: name: "punctuation.separator.key-value.turing"
			patterns: [
				
				# Object-oriented Turing: Additional keywords
				{
					match: "\\G(?:\\s*(pervasive|\\*)(?=\\s))?\\s*(register)(?=\\s)"
					captures:
						1: name: "storage.modifier.pervasive.oot.turing"
						2: name: "storage.modifier.register.oot.turing"
				}
				
				# Variable names
				{include: "#list"}
			]
		},{
			
			# Assignment
			name: "meta.variable-assignment.turing"
			begin: "(\\w+)\\s*(:=)"
			end: "(?=\\S)"
			beginCaptures:
				1: name: "variable.name.turing"
				2: name: "punctuation.separator.key-value.turing"
		}]

	
	# Boolean values
	boolean:
		name: "constant.language.boolean.$1.turing"
		match: "\\b(true|false)\\b"
	
	
	# Arithmetic/Punctuation-based operators
	operators:
		patterns: [
			{match: "\\.\\.",  name: "punctuation.definition.range.turing"}
			{match: ":=",      name: "punctuation.separator.key-value.assignment.turing"}
			{match: "->",      name: "punctuation.separator.class.accessor.turing"}
			{match: "\\+",     name: "keyword.operator.arithmetic.add.turing"}
			{match: "-",       name: "keyword.operator.arithmetic.subtract.turing"}
			{match: "\\*",     name: "keyword.operator.arithmetic.multiply.turing"}
			{match: "\\\\",    name: "keyword.operator.arithmetic.divide.turing"}
			{match: "<=",      name: "keyword.operator.logical.equal-or-less.subset.turing"}
			{match: ">=",      name: "keyword.operator.logical.equal-or-greater.superset.turing"}
			{match: "<",       name: "keyword.operator.logical.less.turing"}
			{match: ">",       name: "keyword.operator.logical.greater.turing"}
			{match: "=",       name: "keyword.operator.logical.equal.turing"}
			{match: "not=|~=", name: "keyword.operator.logical.not.turing"}
			{match: ":",       name: "punctuation.separator.key-value.turing"}
		]


	# Standard library
	stdlib:
		patterns: [
			{include: "#modules"}
			{include: "#stdproc"}
			
			# Routines/constants exported unqualified
			{include: "#keyboard-constants"}
			{include: "#math-routines"}
			{include: "#str-routines"}
			{include: "#typeconv-routines"}
		]
	
	
	# Procedures not associated with any specific module
	stdproc:
		name: "support.function.${1:/downcase}.turing"
		match: """(?x)\\b
			(addr|buttonchoose|buttonmoved|buttonwait|clock|cls|colou?r|colou?rback|date|delay|drawarc|drawbox|drawdot
			|drawfill|drawfillarc|drawfillbox|drawfillmapleleaf|drawfilloval|drawfillpolygon|drawfillstar|drawline
			|drawmapleleaf|drawoval|drawpic|drawpolygon|drawstar|empty|eof|fetcharg|getch|getchar|getenv|getpid
			|getpriority|hasch|locate|locatexy|maxcol|maxcolou?r|maxint|maxnat|maxrow|maxx|maxy|minint|minnat
			|mousewhere|nargs|parallelget|parallelput|play|playdone|pred|rand|randint|randnext|randomize
			|randseed|setpriority|setscreen|simutime|sizeof|sizepic|sound|succ|sysclock|takepic|time|wallclock
			|whatcol|whatcolou?r|whatcolou?rback|whatdotcolou?r|whatrow)\\b
		"""
		
	
	# Keyboard constants: http://compsci.ca/holtsoft/doc/keyboardmodule.html
	"keyboard-constants":
		name: "support.constant.keyboard.turing"
		match: """(?x)\\b(?:
			(?:KEY|ORD)_(?:
				F1[0-2]|F[1-9]|CTRL_[A-Z]|ALT_[A-Z0-9]|(?:CTRL|ALT|SHIFT)_(?:F1[0-2]|F[1-9])|
				ALT(?:_EQUALS|_MINUS)?|BACK_TAB|BACKSPACE|CTRL|DELETE|END|ENTER|ESC|HOME|INSERT|KEYPAD_5|PGDN|PGUP|SHIFT|SHIFT_TAB|TAB|
				CTRL_(?:BACKSLASH|BACKSPACE|CARET|(?:UP|RIGHT|LEFT|DOWN)_ARROW|CLOSE_BRACKET|DELETE|END|HOME|INSERT|OPEN_BRACKET|PGDN|PGUP|UNDERSCORE)|
				(?:UP|RIGHT|LEFT|DOWN)_ARROW)
			|
			ORD_(?:
				AMPERSAND|APOSTROPHE|ASTERISK|BACKSLASH|BAR|CARET|COLON|COMMA|DOT|EQUALS|(?:GREATER|LESS)_THAN|
				(?:CLOSE|OPEN)_(?:BRACE|BRACKET|PARENTHESIS)|(?:EXCALAMATION|HAS|QUESTION|QUOTATION)_MARK|MINUS|
				(?:AT|DOLLAR|PERCENT)_SIGN|PERIOD|PLUS|SEMICOLON|SINGLE_QUOTE|SLASH|SPACE|TILDE|UNDERSCORE|[A-Z0-9]|LOWER_[A-Z])
			)\\b
		"""


	# Math routines: http://compsci.ca/holtsoft/doc/mathmodule.html
	"math-routines":
		name: "support.function.${1:/downcase}.turing"
		match: "\\b(abs|arccos|arccosd|arcsin|arcsind|arctan|arctand|cos|cosd|exp|ln|max|min|sign|sin|sind|tan|tand|sqrt)\\b"


	# Str routines: http://compsci.ca/holtsoft/doc/strmodule.html
	"str-routines":
		name: "support.function.${1:/downcase}.turing"
		match: "\\b(Lower|Upper|Trim|index|length|repeat)\\b"


	# TypeConv routines: http://compsci.ca/holtsoft/doc/typeconvmodule.html
	"typeconv-routines":
		name: "support.function.${1:/downcase}.turing"
		match: "\\b(ceil|chr|erealstr|floor|frealstr|intreal|intstr|natreal|natstr|ord|realstr|round|strint|strintok|strnat|strnatok|strreal|strrealok)\\b"

	
	
	# Modules
	modules:
		patterns: [{
			
			# Concurrency
			match: "\\b(Concurrency)\\b(?:(\\.)(empty|[gs]etpriority|simutime)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.$3.turing"
		},{
			
			# Config
			match: "\\b(Config)\\b(?:(\\.)(Display|Lang|Machine)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Dir
			match: "\\b(Dir)\\b(?:(\\.)(Change|Close|Create|Current|Delete|Get|GetLong|Open)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Draw
			match: "\\b(Draw)\\b(?:(\\.)(Arc|Box|Cls|Dot|Fill|FillArc|FillBox|FillMapleLeaf|FillOval|FillPolygon|FillStar|Line|MapleLeaf|Oval|Polygon|Star|Text)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Error
			match: "\\b(Error)\\b(?:(\\.)(Last|LastMsg|LastStr|Msg|Str|Trip)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# ErrorNum/Exceptions
			match: "\\b(ErrorNum|Exceptions)\\b(?:(\\.)(\\w+)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# File
			match: "\\b(File)\\b(?:(\\.)(Copy|Delete|DiskFree|Exists|Rename|Status)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Font
			match: "\\b(Font)\\b(?:(\\.)(Draw|Free|GetName|GetSize|GetStyle|Name|New|Sizes|StartName|StartSize|Width)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# GUI
			match: """(?x)\\b(GUI)\\b(?:(\\.)
				(AddLine|AddText|Alert|Alert2|Alert3|AlertFull|Choose|ChooseFull|ClearText|CloseWindow|CreateButton|CreateButtonFull
				|CreateCanvas|CreateCanvasFull|CreateCheckBox|CreateCheckBoxFull|CreateFrame|CreateHorizontalScrollBar|CreateHorizontalScrollBarFull
				|CreateHorizontalSlider|CreateLabel|CreateLabelFull|CreateLabelledFrame|CreateLine|CreateMenu|CreateMenuItem|CreateMenuItemFull
				|CreatePicture|CreatePictureButton|CreatePictureButtonFull|CreatePictureRadioButton|CreatePictureRadioButtonFull|CreateRadioButton
				|CreateRadioButtonFull|CreateTextBox|CreateTextBoxFull|CreateTextField|CreateTextFieldFull|CreateVerticalScrollBar|CreateVerticalScrollBarFull
				|CreateVerticalSlider|Disable|Dispose|DrawArc|DrawBox|DrawCls|DrawDot|DrawFill|DrawFillArc|DrawFillBox|DrawFillMapleLeaf|DrawFillOval
				|DrawFillPolygon|DrawFillStar|DrawLine|DrawMapleLeaf|DrawOval|DrawPolygon|DrawStar|DrawText|Enable|FontDraw|GetCheckBox|GetEventTime
				|GetEventWidgetID|GetEventWindow|GetHeight|GetMenuBarHeight|GetScrollBarWidth|GetSliderValue|GetText|GetVersion|GetWidth|GetX|GetY|Hide
				|HideMenuBar|OpenFile|OpenFileFull|PicDraw|PicNew|PicScreenLoad|PicScreenSave|ProcessEvent|Quit|Refresh|SaveFile|SaveFileFull|SelectRadio
				|SetActive|SetBackgroundColor|SetBackgroundColour|SetCheckBox|SetDefault|SetDisplayWhenCreated|SetKeyEventHandler|SetLabel|SetMouseEventHandler
				|SetNullEventHandler|SetPosition|SetPositionAndSize|SetScrollAmount|SetSelection|SetSize|SetSliderMinMax|SetSliderReverse|SetSliderSize
				|SetSliderValue|SetText|SetXOR|Show|ShowMenuBar)?\\b)?
			"""
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Input
			match: "\\b(Input)\\b(?:(\\.)(getch|getchar|hasch|KeyDown|Pause)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Joystick
			match: "\\b(Joystick)\\b(?:(\\.)(GetInfo)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Keyboard
			match: "\\b(Keyboard)\\b(?:(\\.)(\\w+)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: patterns: [include: "#keyboard-constants"]
		},{
			
			# Limits
			match: "\\b(Limits)\\b(?:(\\.)(DefaultFW|DefaultEW|minint|maxint|minnat|maxnat)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Math
			match: "(?x)\\b(Math)\\b(?:(\\.)(?:(PI|E)|(Distance|DistancePointLine)|(\\w+))?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.constant.${3:/downcase}.turing"
				4: name: "support.function.${4:/downcase}.turing"
				5: patterns: [include: "#math-routines"]
		},{
			
			# Mouse
			match: "\\b(Mouse)\\b(?:(\\.)(ButtonChoose|ButtonMoved|ButtonWait|Where)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Music
			match: "\\b(Music)\\b(?:(\\.)(Play|PlayFile|PlayFileStop|Sound|SoundOff)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Net
			match: """(?x)
				\\b(Net)\\b(?:(\\.)
				(BytesAvailable|CharAvailable|CloseConnection|HostAddressFromName|HostNameFromAddress
				|LineAvailable|LocalAddress|LocalName|OpenConnection|OpenURLConnection|TokenAvailable
				|WaitForConnection)?\\b)?"""
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# PC
			match: "\\b(PC)\\b(?:(\\.)(ParallelGet|ParallelPut)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Pic
			match: """(?x)
				\\b(Pic)\\b(?:(\\.)
				(Blend|Blur|Draw|DrawFrames|DrawFramesBack|DrawSpecial|DrawSpecialBack|FileNew
				|FileNewFrames|Flip|Frames|Free|Height|Mirror|New|Rotate|Save|Scale|ScreenLoad
				|ScreenSave|SetTransparentColou?r|Width)?
				\\b)?"""
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Rand
			match: "\\b(Rand)\\b(?:(\\.)(Int|Next|Real|Reset|Seed|Set)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# RGB
			match: "\\b(RGB)\\b(?:(\\.)(AddColou?r|[GS]etColou?r|maxcolou?r)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Sprite
			match: "\\b(Sprite)\\b(?:(\\.)(Animate|ChangePic|Free|Hide|New|SetFrameRate|SetHeight|SetPosition|Show)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Stream
			match: "\\b(Stream)\\b(?:(\\.)(eof|Flush|FlushAll)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Str
			match: "\\b(Str)\\b(?:(\\.)(\\w+)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: patterns: [include: "#str-routines"]
		},{
			
			# Sys
			match: "\\b(Sys)\\b(?:(\\.)(Exec|FetchArg|GetComputerName|GetEnv|GetPid|GetUserName|Nargs)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Text
			match: "\\b(Text)\\b(?:(\\.)(Cls|Colou?r|Colou?rBack|Locate|LocateXY|maxcol|maxrow|WhatCol|WhatColou?r|WhatColou?rBack|WhatRow)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Time
			match: "\\b(Time)\\b(?:(\\.)(Date|DateSec|Delay|Elapsed|ElapsedCPU|PartsSec|Sec|SecDate|SecParts)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# TypeConv
			match: "\\b(TypeConv)\\b(?:(\\.)(\\w+)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: patterns: [include: "#typeconv-routines"]
		},{
			
			# View
			match: "\\b(View)\\b(?:(\\.)(ClipAdd|ClipOff|ClipSet|maxcolou?r|maxx|maxy|Set|Update|WhatDotColou?r)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		},{
			
			# Window
			match: "\\b(Window)\\b(?:(\\.)(Close|GetActive|GetPosition|GetSelect|Hide|Open|Select|Set|SetActive|SetPosition|Show|Update)?\\b)?"
			captures:
				1: name: "support.class.${1:/downcase}.turing"
				2: name: "meta.delimiter.property.period.turing"
				3: name: "support.function.${3:/downcase}.turing"
		}]
